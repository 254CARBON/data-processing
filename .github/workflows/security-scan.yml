name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run Safety (Python dependency vulnerability scan)
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report

    - name: Run Bandit (Python security linter)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Run Semgrep (Static analysis)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Container image security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    strategy:
      matrix:
        service: [normalization-service, enrichment-service, aggregation-service, projection-service]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./service-${{ matrix.service }}
        push: false
        tags: ${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy filesystem scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-fs-results-${{ matrix.service }}.sarif'

  # Infrastructure security scanning
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Run Checkov (Infrastructure security scan)
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'checkov-results.sarif'

    - name: Run TFSec (Terraform security scanner)
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: .
        format: sarif
        soft_fail: true

  # Kubernetes security scanning
  kubernetes-scan:
    name: Kubernetes Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Run Kube-score (Kubernetes object analysis)
      uses: zegl/kube-score-action@v1.11.0
      with:
        command: score
        paths: helm/templates/
        output-format: sarif
        output-file: kube-score-results.sarif

    - name: Upload Kube-score scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'kube-score-results.sarif'

    - name: Run Kubeaudit (Kubernetes security audit)
      uses: shopify/kubeaudit-action@v0.11.0
      with:
        command: kubeaudit
        paths: helm/templates/
        output-format: sarif
        output-file: kubeaudit-results.sarif

    - name: Upload Kubeaudit scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'kubeaudit-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog (Secrets detection)
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run Gitleaks (Git secrets scanner)
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # SAST (Static Application Security Testing)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:python"

  # DAST (Dynamic Application Security Testing)
  dast-scan:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Compose
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 30

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run OWASP ZAP Full Scan
      uses: zaproxy/action-full-scan@v0.4.0
      with:
        target: 'http://localhost:8080'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: report_html.html

    - name: Cleanup
      run: docker-compose down

  # Security policy compliance
  compliance-scan:
    name: Security Compliance Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install compliance tools
      run: |
        pip install compliance-checker security-headers-checker

    - name: Check security headers compliance
      run: |
        python -c "
        import requests
        import json
        
        # Test security headers on deployed services
        services = ['normalization-service', 'enrichment-service', 'aggregation-service', 'projection-service']
        results = {}
        
        for service in services:
            try:
                response = requests.get(f'http://localhost:8080/health', timeout=10)
                headers = dict(response.headers)
                results[service] = {
                    'status_code': response.status_code,
                    'security_headers': {
                        'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
                        'Content-Security-Policy': headers.get('Content-Security-Policy'),
                        'X-Frame-Options': headers.get('X-Frame-Options'),
                        'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
                        'X-XSS-Protection': headers.get('X-XSS-Protection')
                    }
                }
            except Exception as e:
                results[service] = {'error': str(e)}
        
        with open('security-headers-report.json', 'w') as f:
            json.dump(results, f, indent=2)
        "

    - name: Upload compliance results
      uses: actions/upload-artifact@v3
      with:
        name: compliance-reports
        path: security-headers-report.json

  # Security summary and reporting
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, infrastructure-scan, kubernetes-scan, secrets-scan, sast-scan]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security summary
      run: |
        python -c "
        import json
        import os
        from datetime import datetime
        
        summary = {
            'scan_date': datetime.utcnow().isoformat(),
            'repository': '${{ github.repository }}',
            'branch': '${{ github.ref_name }}',
            'commit': '${{ github.sha }}',
            'scan_results': {}
        }
        
        # Check for scan results
        scan_types = ['dependency-scan', 'container-scan', 'infrastructure-scan', 'kubernetes-scan', 'secrets-scan', 'sast-scan']
        
        for scan_type in scan_types:
            if os.path.exists(f'{scan_type}-reports'):
                summary['scan_results'][scan_type] = 'completed'
            else:
                summary['scan_results'][scan_type] = 'not_found'
        
        # Write summary
        with open('security-summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        
        print('Security scan summary generated')
        "

    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.json

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));
          
          const comment = `## Security Scan Summary
          
          **Scan Date:** ${summary.scan_date}
          **Branch:** ${summary.branch}
          **Commit:** ${summary.commit}
          
          ### Scan Results:
          ${Object.entries(summary.scan_results).map(([scan, status]) => 
            `- **${scan}**: ${status === 'completed' ? '✅ Completed' : '❌ Failed/Missing'}`
          ).join('\n')}
          
          ### Security Recommendations:
          - Review all security scan results in the Security tab
          - Address any high or critical vulnerabilities
          - Ensure all security headers are properly configured
          - Verify container images are free of known vulnerabilities
          
          For detailed results, check the Security tab and download the artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Security notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-summary]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
    - name: Send security alert
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          🚨 Security scan failed for 254Carbon Data Processing Pipeline
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          Please review the security scan results and address any issues.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}