[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "254carbon-data-processing"
version = "0.1.0"
description = "Domain pipeline services for transforming raw market data into enriched, aggregated, and query-ready serving layers"
authors = [
    {name = "254Carbon Team", email = "team@254carbon.com"}
]
license = {text = "Apache-2.0"}
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.11.0",
    "structlog>=22.1.0",
    "confluent-kafka>=1.9.0",
    "asyncpg>=0.28.0",
    "redis>=4.3.0",
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "opentelemetry-api>=1.15.0",
    "opentelemetry-sdk>=1.15.0",
    "opentelemetry-exporter-otlp>=1.15.0",
    "opentelemetry-instrumentation-aiohttp-client>=0.38b0",
    "opentelemetry-instrumentation-asyncio>=0.38b0",
    "opentelemetry-instrumentation-logging>=0.38b0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "ruff>=0.1.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "httpx>=0.24.0",
    "python-dotenv>=0.19.0",
    "pyyaml>=6.0",
    "testcontainers>=3.4.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "httpx>=0.24.0",
    "testcontainers>=3.4.0",
]

docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/254carbon/data-processing"
Documentation = "https://254carbon.github.io/data-processing"
Repository = "https://github.com/254carbon/data-processing.git"
Issues = "https://github.com/254carbon/data-processing/issues"

[project.scripts]
data-proc-normalization = "service_normalization.app.main:main"
data-proc-enrichment = "service_enrichment.app.main:main"
data-proc-aggregation = "service_aggregation.app.main:main"
data-proc-projection = "service_projection.app.main:main"
data-proc-migrate = "migrations.migrate:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["shared*", "service_*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["shared", "service_normalization", "service_enrichment", "service_aggregation", "service_projection"]
known_third_party = ["aiohttp", "asyncio", "structlog", "confluent_kafka", "asyncpg", "redis", "pandas", "numpy"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "confluent_kafka.*",
    "clickhouse.*",
    "redis.*",
    "structlog.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=shared",
    "--cov=service_normalization",
    "--cov=service_enrichment",
    "--cov=service_aggregation",
    "--cov=service_projection",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["shared", "service_normalization", "service_enrichment", "service_aggregation", "service_projection"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
        ],
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.3.0",
        hooks = [{id = "black"}],
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{id = "isort"}],
    },
    {
        repo = "https://github.com/charliermarsh/ruff-pre-commit",
        rev = "v0.0.270",
        hooks = [{id = "ruff"}],
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.3.0",
        hooks = [{id = "mypy"}],
    },
]

