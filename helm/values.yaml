# Default values for data-processing-pipeline.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Database migrations
migrations:
  clickhouse:
    enabled: true
    image:
      repository: clickhouse/clickhouse-client
      tag: "23.8"
      pullPolicy: IfNotPresent
    host: "clickhouse"
    port: "9000"
    user: "default"
    password: ""
    database: "data_processing"
    backoffLimit: 1
    resources: {}
    extraEnv: []
    imagePullSecrets: []
    existingSecret:
      name: ""
      key: "clickhouse-password"

# Service configuration
services:
  "normalize-ticks":
    enabled: true
    replicaCount: 2
    image:
      repository: ghcr.io/254carbon/normalize-ticks
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8080
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 6
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
      prometheus.io/path: "/metrics"
    env:
      DATA_PROC_ENV: "production"
      DATA_PROC_LOG_LEVEL: "info"
      DATA_PROC_KAFKA_BOOTSTRAP: "kafka:9092"
      DATA_PROC_CLICKHOUSE_URL: "http://clickhouse:8123"
      NORMALIZE_TICKS_INPUT_TOPIC: "ingestion.market.ticks.raw.v1"
      NORMALIZE_TICKS_OUTPUT_TOPIC: "normalized.market.ticks.v1"
      NORMALIZE_TICKS_DLQ_TOPIC: "processing.deadletter.market.ticks.v1"
      NORMALIZE_TICKS_CONSUMER_GROUP: "normalize-ticks-staging"
      NORMALIZE_TICKS_BACKFILL_ENABLED: "true"
      NORMALIZE_TICKS_IDEMPOTENCY_TTL_SECONDS: "900"
      NORMALIZE_TICKS_IDEMPOTENCY_MAX_ENTRIES: "100000"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"

  normalization:
    enabled: true
    replicaCount: 2
    image:
      repository: normalization-service
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8080
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
        ephemeral-storage: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
        ephemeral-storage: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
      behavior:
        scaleDown:
          stabilizationWindowSeconds: 300
          policies:
          - type: Percent
            value: 50
            periodSeconds: 60
        scaleUp:
          stabilizationWindowSeconds: 0
          policies:
          - type: Percent
            value: 100
            periodSeconds: 15
          - type: Pods
            value: 2
            periodSeconds: 60
    nodeSelector: {}
    tolerations: []
    affinity: {}
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
      prometheus.io/path: "/metrics"
    env:
      DATA_PROC_ENV: "production"
      DATA_PROC_LOG_LEVEL: "info"
      DATA_PROC_KAFKA_BOOTSTRAP: "kafka:9092"
      DATA_PROC_CLICKHOUSE_URL: "http://clickhouse:8123"
      DATA_PROC_TRACING_ENABLED: "true"
      DATA_PROC_JAEGER_AGENT_HOST: "data-processing-pipeline-jaeger-agent"
      DATA_PROC_JAEGER_AGENT_PORT: "6831"
      DATA_PROC_SERVICE_NAME: "normalization-service"
      DATA_PROC_POSTGRES_DSN: "postgresql://user:password@postgresql:5432/db"
      DATA_PROC_REDIS_URL: "redis://redis:6379/0"

  enrichment:
    enabled: true
    replicaCount: 2
    image:
      repository: enrichment-service
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8081
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 8
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    env:
      DATA_PROC_ENV: "production"
      DATA_PROC_LOG_LEVEL: "info"
      DATA_PROC_KAFKA_BOOTSTRAP: "kafka:9092"
      DATA_PROC_CLICKHOUSE_URL: "http://clickhouse:8123"
      DATA_PROC_POSTGRES_DSN: "postgresql://user:password@postgresql:5432/db"
      DATA_PROC_REDIS_URL: "redis://redis:6379/0"

  aggregation:
    enabled: true
    replicaCount: 3
    image:
      repository: aggregation-service
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8082
    resources:
      limits:
        cpu: 2000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 512Mi
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 12
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    env:
      DATA_PROC_ENV: "production"
      DATA_PROC_LOG_LEVEL: "info"
      DATA_PROC_KAFKA_BOOTSTRAP: "kafka:9092"
      DATA_PROC_CLICKHOUSE_URL: "http://clickhouse:8123"
      DATA_PROC_POSTGRES_DSN: "postgresql://user:password@postgresql:5432/db"
      DATA_PROC_REDIS_URL: "redis://redis:6379/0"

  projection:
    enabled: true
    replicaCount: 2
    image:
      repository: projection-service
      tag: "latest"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 8083
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
    env:
      DATA_PROC_ENV: "production"
      DATA_PROC_LOG_LEVEL: "info"
      DATA_PROC_KAFKA_BOOTSTRAP: "kafka:9092"
      DATA_PROC_CLICKHOUSE_URL: "http://clickhouse:8123"
      DATA_PROC_POSTGRES_DSN: "postgresql://user:password@postgresql:5432/db"
      DATA_PROC_REDIS_URL: "redis://redis:6379/0"
      DATA_PROC_TRACING_ENABLED: "true"
      DATA_PROC_JAEGER_AGENT_HOST: "data-processing-pipeline-jaeger-agent"
      DATA_PROC_JAEGER_AGENT_PORT: "6831"
      DATA_PROC_SERVICE_NAME: "projection-service"

# Security configuration
security:
  enabled: true
  mtls:
    enabled: true
    certDir: "/etc/certs"
  apiKeys:
    enabled: true
  networkPolicies:
    enabled: true

# Monitoring configuration
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
  grafana:
    enabled: true
    adminPassword: "admin"
    dashboards:
      enabled: true

# Jaeger configuration
jaeger:
  enabled: true
  collector:
    replicaCount: 2
    image:
      repository: jaegertracing/jaeger-collector
      tag: "1.51"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
  query:
    replicaCount: 1
    image:
      repository: jaegertracing/jaeger-query
      tag: "1.51"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
  agent:
    replicaCount: 1
    image:
      repository: jaegertracing/jaeger-agent
      tag: "1.51"
      pullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Elasticsearch configuration for Jaeger storage
elasticsearch:
  enabled: true
  replicaCount: 1
  image:
    repository: docker.elastic.co/elasticsearch/elasticsearch
    tag: "8.11.0"
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 2000m
      memory: 2Gi
    requests:
      cpu: 1000m
      memory: 1Gi
  storage:
    size: 10Gi
    storageClass: ""

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: data-processing.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# External dependencies
externalDependencies:
  kafka:
    enabled: true
    bootstrapServers: "kafka:9092"
  clickhouse:
    enabled: true
    url: "http://clickhouse:8123"
    host: "clickhouse"
    port: "9000"
    user: "default"
    password: ""
    database: "data_processing"
  postgresql:
    enabled: true
    dsn: "postgresql://user:password@postgresql:5432/db"
  redis:
    enabled: true
    url: "redis://redis:6379/0"

# Kafka configuration
kafka:
  enabled: true
  replicaCount: 3
  persistence:
    enabled: true
    size: 10Gi
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

# ClickHouse configuration
clickhouse:
  enabled: true
  replicaCount: 1
  persistence:
    enabled: true
    size: 50Gi
  resources:
    limits:
      cpu: 2000m
      memory: 4Gi
    requests:
      cpu: 1000m
      memory: 2Gi

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "password"
    username: "user"
    password: "password"
    database: "db"
  primary:
    persistence:
      enabled: true
      size: 20Gi
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

# Redis configuration
redis:
  enabled: true
  replica:
    replicaCount: 3
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 512Mi
